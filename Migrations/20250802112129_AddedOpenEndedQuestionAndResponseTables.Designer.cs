// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using play_360.EF.Contexts;

#nullable disable

namespace play_360.Migrations
{
    [DbContext(typeof(Play360Context))]
    [Migration("20250802112129_AddedOpenEndedQuestionAndResponseTables")]
    partial class AddedOpenEndedQuestionAndResponseTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("play_360.EF.Models.AchievementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AchievementType");
                });

            modelBuilder.Entity("play_360.EF.Models.AgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("play_360.EF.Models.CreditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CreditType");
                });

            modelBuilder.Entity("play_360.EF.Models.DominantSide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DominantSide");
                });

            modelBuilder.Entity("play_360.EF.Models.FeelingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeelingType");
                });

            modelBuilder.Entity("play_360.EF.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("play_360.EF.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaType");
                });

            modelBuilder.Entity("play_360.EF.Models.ProficiencyLevelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProficiencyLevelType");
                });

            modelBuilder.Entity("play_360.EF.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DominantSideId")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Stat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAchievement");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileCertificate");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileEducation");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileGoal");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileMedicalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InjuryHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMedicalInfo");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileReference");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProficiencyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("SkillName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSkill");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileTeam");
                });

            modelBuilder.Entity("play_360.EF.Models.QuestionCategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategoryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Physical"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mental"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("play_360.EF.Models.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReferralStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RefferedUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReffererUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReffererUserId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("play_360.EF.Models.ReferralStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReferralStatus");
                });

            modelBuilder.Entity("play_360.EF.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("play_360.EF.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopiAccepting")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "bsngema7@gmail.com",
                            FirstName = "Bongi",
                            IdentityNumber = "9003205674083",
                            IsPopiAccepting = true,
                            LastName = "Ngema",
                            Password = "12345",
                            ReferralCode = "AaBbCc",
                            UpdatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "yenzom@icloud.com",
                            FirstName = "Yenzo",
                            IdentityNumber = "9003205674083",
                            IsPopiAccepting = true,
                            LastName = "Mdladla",
                            Password = "12345",
                            ReferralCode = "BbCcDd",
                            UpdatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "stephen@icloud.com",
                            FirstName = "Stephen",
                            IdentityNumber = "9003205674083",
                            IsPopiAccepting = true,
                            LastName = "Engelbrecht",
                            Password = "12345",
                            ReferralCode = "CcDdEe",
                            UpdatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "ndlovumpilo@icloud.com",
                            FirstName = "Mpilo",
                            IdentityNumber = "9003205674083",
                            IsPopiAccepting = true,
                            LastName = "Ndlovu",
                            Password = "12345",
                            ReferralCode = "DdEeFe",
                            UpdatedAt = new DateTime(2025, 8, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievement");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessBooleanQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WellnessBooleanQuestion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "Do you have any injuries or pain?"
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "Do you feel mentally exhausted?"
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "Did you practice mindfulness today?"
                        },
                        new
                        {
                            Id = 4,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "Any injuries or stress this week?"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessBooleanQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WellnessBooleanQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WellnessBooleanQuestionId");

                    b.ToTable("WellnessBooleanQuestionAnswer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "True",
                            WellnessBooleanQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "False",
                            WellnessBooleanQuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "True",
                            WellnessBooleanQuestionId = 2
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "False",
                            WellnessBooleanQuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "True",
                            WellnessBooleanQuestionId = 3
                        },
                        new
                        {
                            Id = 6,
                            AnswerText = "False",
                            WellnessBooleanQuestionId = 3
                        },
                        new
                        {
                            Id = 7,
                            AnswerText = "True",
                            WellnessBooleanQuestionId = 4
                        },
                        new
                        {
                            Id = 8,
                            AnswerText = "False",
                            WellnessBooleanQuestionId = 4
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessBooleanQuestionCheckinResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessBooleanAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessBooleanQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessCheckinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WellnessBooleanQuestionCheckinResponse");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessCheckin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeelingType")
                        .HasColumnType("int");

                    b.Property<bool>("IsInjured")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WellnessCheckin");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessMultipleChoiceAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WellnessMultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WellnessMultipleChoiceQuestionId");

                    b.ToTable("WellnessMultipleChoiceAnswer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "Good",
                            WellnessMultipleChoiceQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "Okay",
                            WellnessMultipleChoiceQuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "Bad",
                            WellnessMultipleChoiceQuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "Good",
                            WellnessMultipleChoiceQuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "Okay",
                            WellnessMultipleChoiceQuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            AnswerText = "Bad",
                            WellnessMultipleChoiceQuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            AnswerText = "Good",
                            WellnessMultipleChoiceQuestionId = 3
                        },
                        new
                        {
                            Id = 8,
                            AnswerText = "Okay",
                            WellnessMultipleChoiceQuestionId = 3
                        },
                        new
                        {
                            Id = 9,
                            AnswerText = "Bad",
                            WellnessMultipleChoiceQuestionId = 3
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessMultipleChoiceCheckinResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessCheckinId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessMultipleChoiceAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessMultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WellnessMultipleChoiceCheckinResponse");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessMultipleChoiceQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WellnessMultipleChoiceQuestion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 15, 31, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "How do you feel today?"
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 15, 31, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "Do you feel muscle soreness?"
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 15, 31, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "How did your week feel overall?"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessOpenEndedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WellnessOpenEndedQuestion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 15, 31, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "Any mental challenges or stresses today?"
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 15, 31, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "What was your biggest challenge this week?"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessOpenEndedQuestionCheckinResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WellnessOpenEndedQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WellnessOpenEndedQuestionId");

                    b.ToTable("WellnessOpenEndedQuestionCheckinResponse");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WellnessQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessQuestionFrequencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WellnessQuestionFrequencyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Weekly"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("WellnessResponse");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessScaleQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WellnessScaleQuestion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "How much energy do you have?"
                        },
                        new
                        {
                            Id = 2,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 1,
                            QuestionText = "How well did you sleep last night?"
                        },
                        new
                        {
                            Id = 3,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "How motivated do you feel today ?"
                        },
                        new
                        {
                            Id = 4,
                            AgeGroupId = 1,
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            FrequencyTypeId = 1,
                            IsActive = true,
                            QuestionCategoryId = 2,
                            QuestionText = "How focused were you during training today?"
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessScaleQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WellnessScaleQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WellnessScaleQuestionId");

                    b.ToTable("WellnessScaleQuestionAnswer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "1",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "2",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "3",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "4",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "5",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 6,
                            AnswerText = "6",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 7,
                            AnswerText = "7",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 8,
                            AnswerText = "8",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 9,
                            AnswerText = "9",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 10,
                            AnswerText = "10",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 1
                        },
                        new
                        {
                            Id = 11,
                            AnswerText = "1",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 12,
                            AnswerText = "2",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 13,
                            AnswerText = "3",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 14,
                            AnswerText = "4",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 15,
                            AnswerText = "5",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 16,
                            AnswerText = "6",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 17,
                            AnswerText = "7",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 18,
                            AnswerText = "8",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 19,
                            AnswerText = "9",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 20,
                            AnswerText = "10",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 2
                        },
                        new
                        {
                            Id = 21,
                            AnswerText = "1",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 22,
                            AnswerText = "2",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 23,
                            AnswerText = "3",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 24,
                            AnswerText = "4",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 25,
                            AnswerText = "5",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 26,
                            AnswerText = "6",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 27,
                            AnswerText = "7",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 28,
                            AnswerText = "8",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 29,
                            AnswerText = "9",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 30,
                            AnswerText = "10",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 3
                        },
                        new
                        {
                            Id = 31,
                            AnswerText = "1",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 32,
                            AnswerText = "2",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 33,
                            AnswerText = "3",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 34,
                            AnswerText = "4",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 35,
                            AnswerText = "5",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 36,
                            AnswerText = "6",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 37,
                            AnswerText = "7",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 38,
                            AnswerText = "8",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 39,
                            AnswerText = "9",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        },
                        new
                        {
                            Id = 40,
                            AnswerText = "10",
                            CreatedAt = new DateTime(2025, 8, 2, 8, 58, 0, 0, DateTimeKind.Unspecified),
                            WellnessScaleQuestionId = 4
                        });
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessScaleQuestionCheckinResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessCheckinId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessScaleAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("WellnessScaleQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WellnessScaleQuestionCheckinResponse");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessWeeklySummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AverageFeeling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InjuryCount")
                        .HasColumnType("int");

                    b.Property<string>("SummaryNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WellnessWeeklySummary");
                });

            modelBuilder.Entity("play_360.EF.Models.Credit", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("Credits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.Media", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("Medias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.Profile", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("play_360.EF.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileAchievement", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileAchievements")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileCertificate", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileCertificates")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileEducation", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileEducations")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileGoal", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileGoals")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileMedicalInfo", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileMedicalInfos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileReference", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileReferences")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileSkill", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileSkills")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.ProfileTeam", b =>
                {
                    b.HasOne("play_360.EF.Models.Profile", "Profile")
                        .WithMany("ProfileTeams")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("play_360.EF.Models.Referral", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("Referrals")
                        .HasForeignKey("ReffererUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.Transaction", b =>
                {
                    b.HasOne("play_360.EF.Models.Credit", "Credit")
                        .WithOne("Transaction")
                        .HasForeignKey("play_360.EF.Models.Transaction", "CreditId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.UserAchievement", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessBooleanQuestionAnswer", b =>
                {
                    b.HasOne("play_360.EF.Models.WellnessBooleanQuestion", "WellnessBooleanQuestion")
                        .WithMany("WellnessBooleanQuestionAnswers")
                        .HasForeignKey("WellnessBooleanQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessBooleanQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessCheckin", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("WellnessCheckins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessMultipleChoiceAnswer", b =>
                {
                    b.HasOne("play_360.EF.Models.WellnessMultipleChoiceQuestion", "WellnessMultipleChoiceQuestion")
                        .WithMany("WellnessMultipleChoiceAnswers")
                        .HasForeignKey("WellnessMultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessMultipleChoiceQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessOpenEndedQuestionCheckinResponse", b =>
                {
                    b.HasOne("play_360.EF.Models.WellnessOpenEndedQuestion", "WellnessOpenEndedQuestion")
                        .WithMany("WellnessOpenEndedQuestionResponses")
                        .HasForeignKey("WellnessOpenEndedQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessOpenEndedQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessResponse", b =>
                {
                    b.HasOne("play_360.EF.Models.WellnessQuestion", "WellnessQuestion")
                        .WithMany("WellnessResponses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("WellnessResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WellnessQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessScaleQuestionAnswer", b =>
                {
                    b.HasOne("play_360.EF.Models.WellnessScaleQuestion", "WellnessScaleQuestion")
                        .WithMany("WellnessScaleQuestionAnswers")
                        .HasForeignKey("WellnessScaleQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessScaleQuestion");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessWeeklySummary", b =>
                {
                    b.HasOne("play_360.EF.Models.User", "User")
                        .WithMany("WellnessWeeklySummaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("play_360.EF.Models.Credit", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("play_360.EF.Models.Profile", b =>
                {
                    b.Navigation("ProfileAchievements");

                    b.Navigation("ProfileCertificates");

                    b.Navigation("ProfileEducations");

                    b.Navigation("ProfileGoals");

                    b.Navigation("ProfileMedicalInfos");

                    b.Navigation("ProfileReferences");

                    b.Navigation("ProfileSkills");

                    b.Navigation("ProfileTeams");
                });

            modelBuilder.Entity("play_360.EF.Models.User", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Medias");

                    b.Navigation("Profile");

                    b.Navigation("Referrals");

                    b.Navigation("Transactions");

                    b.Navigation("UserAchievements");

                    b.Navigation("WellnessCheckins");

                    b.Navigation("WellnessResponses");

                    b.Navigation("WellnessWeeklySummaries");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessBooleanQuestion", b =>
                {
                    b.Navigation("WellnessBooleanQuestionAnswers");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessMultipleChoiceQuestion", b =>
                {
                    b.Navigation("WellnessMultipleChoiceAnswers");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessOpenEndedQuestion", b =>
                {
                    b.Navigation("WellnessOpenEndedQuestionResponses");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessQuestion", b =>
                {
                    b.Navigation("WellnessResponses");
                });

            modelBuilder.Entity("play_360.EF.Models.WellnessScaleQuestion", b =>
                {
                    b.Navigation("WellnessScaleQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
